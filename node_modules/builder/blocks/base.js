'use strict';

var prime = require('prime'),
	informal = require('informal');

module.exports = prime({
	meta: {
		type: 'base',
		name: 'Base'
	},

	styles: [
		{"value": "light", "label": "Light"},
		{"value": "dark", "label": "Dark"}
	],

	constructor: function(style, data){
		this.style = style;
		this.data = data;
		this.buildBase();
		this.build();
	},

	buildBase: function(){
		this.wrapper = document.createElement('div');
		this.wrapper.setAttribute('draggable', true);
		this.wrapper.setAttribute('class', 'block block-type-' + this.meta.type);
		this.wrapper.innerHTML = '<header class="block--header">' +
			'<span class="block--title">' + this.meta.name + '</span>' +
			'<div class="block--options">' +
				'<select class="block--style">' +
				'</select>' +
				'<button class="action-delete" href="#">Remove block</button>' +
			'</div>' +
		'</header>' +
		'<div class="block--content"></div>';

		this.content = this.wrapper.querySelector('.block--content');
		this.styleSelect = this.wrapper.querySelector('.block--style');
		this.deleteButton = this.wrapper.querySelector('.action-delete');

		var i, html = '';
		for (i = 0; i < this.styles.length; i++){
			html += '<option value="' + this.styles[i].value + '"';
			html += this.style == this.styles[i].value ? ' selected' : '';
			html += '>' + this.styles[i].label + '</option>';
		}
		this.styleSelect.innerHTML += html;

		var self = this;
		this.deleteButton.addEventListener('click', function(e){
			e.preventDefault();
			self.delete();
		});
	},

	build: function(){
		if (!this.formSpec) return;

		this.form = new informal.Form(this.formSpec, this.data);
		this.form.attach(this.content);
	},

	delete: function(){
		var message = 'Are you sure you want to remove this block? All its content will be lost.';
		if (!confirm(message)) return;

		this.wrapper.parentNode.removeChild(this.wrapper);
	},

	serialize: function(){
		var block = {
			type: this.meta.type,
			style: this.styleSelect.value
		};

		if (this.form){
			block.properties = this.form.serialize();
		}

		return block;
	}
});
